package com.example.azhar.myfirstandroidproject;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.StrictMode;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.Snackbar;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class AdvancedLevel extends AppCompatActivity {

    String country1;
    String country2;
    String country3;
    Button submit;
    TextView answer;
    EditText countryText1;
    EditText countryText2;
    EditText countryText3;
     int score=0;
    TextView scoreText;
    TextView timer;
    TextView highScoreText;
    boolean isTimer;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_advanced_level);


        SharedPreferences prefs = this.getSharedPreferences("myPrefsKey", Context.MODE_PRIVATE);
        int score = prefs.getInt("highScore", 0); //0 is the default value for high Score
        System.out.println(score);
        highScoreText = findViewById(R.id.highScore);

        scoreText = findViewById(R.id.score);
        submit  = findViewById(R.id.submit);
        answer = findViewById(R.id.answer);
        countryText1 = findViewById(R.id.countryText1);
        countryText2 = findViewById(R.id.countryText2);
        countryText3 = findViewById(R.id.countryText3);
        timer = findViewById(R.id.timer);
        isTimer = getIntent().getExtras().getBoolean("timer");
        getRandomCountry();


    }

    /**
     * This method generates random countries for the
     * user to guess
     * If the timer is selected the runTimer() method get triggered
     *
     * Random countries are generated by looking through the json and finding the country code then
     * using that country code to append the url by randomly getting a number from the size
     * of the array list
     */
    public void getRandomCountry(){

        if(isTimer==true){
            runTimer();
        }else{
            timer.setText("");
        }

        if(submit.getText().toString().equalsIgnoreCase("next")){
            ArrayList<EditText> inputList = new ArrayList<>();
            ArrayList<String> countryList = new ArrayList<>();
            inputList.add(countryText1);
            inputList.add(countryText2);
            inputList.add(countryText3);
            countryList.add(country1);
            countryList.add(country2);
            countryList.add(country3);
            for (int i = 0; i < countryList.size(); i++) {
                if(inputList.get(i).getText().toString().equalsIgnoreCase(countryList.get(i))){
                    score++;
                    scoreText.setText(String.format("%02d",score));

                }

            }
        }

        String json = null;
        try {
            InputStream is = getAssets().open("countries.json");

            int size = is.available();

            byte[] buffer = new byte[size];

            is.read(buffer);

            is.close();

            json = new String(buffer, "UTF-8");

        } catch (IOException ex) {
            ex.printStackTrace();

        }
        try {
            JSONObject jsonObj = new JSONObject(json);
            Iterator i = jsonObj.keys();

            ArrayList cList = new ArrayList<>();
            final List countryNames = new ArrayList<>();

            while (i.hasNext()){
                cList.add(i.next());
                String code = cList.get(cList.size()-1).toString();
                countryNames.add(jsonObj.getString(code));
            }
            Collections.sort(countryNames);



            int randomCountryIndex = (int)(Math.random() * cList.size());
            int randomCountryIndex2 = (int)(Math.random() * cList.size());
            int randomCountryIndex3= (int)(Math.random() * cList.size());
            String cCode = cList.get(randomCountryIndex).toString();
            String cCode2 = cList.get(randomCountryIndex2).toString();
            String cCode3 = cList.get(randomCountryIndex3).toString();
            country1 =  jsonObj.getString(cCode);
            country2 =  jsonObj.getString(cCode2);
            country3 =  jsonObj.getString(cCode3);
            setCountryFlag(cCode,cCode2,cCode3);
            Log.d("COUNTRYLOG", country1);
        } catch (JSONException e) {
            e.printStackTrace();
        }

    }

    /**
     * This methods sets the image of the UI by downloading the image from the given url
     * https://raw.githubusercontent.com/hjnilsson/country-flags/
     * @param countryCode
     * @param countryCode2
     * @param countryCode3
     *
     * This method let the downloading part happen on the ui thread because android doesn't allow
     * to use the main thread for resource intensive tasks
     */

    public void setCountryFlag(String countryCode, String countryCode2,  String countryCode3) {
        countryCode = countryCode.toLowerCase();
        countryCode2 = countryCode2.toLowerCase();
        countryCode3 = countryCode3.toLowerCase();
        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);
        final String finalCountryCode = countryCode;
        final String finalCountryCode2 = countryCode2;
        final String finalCountryCode3 = countryCode3;
        final ArrayList<Integer> flags = new ArrayList<>();
        flags.add(R.id.flag1);
        flags.add(R.id.flag2);
        flags.add(R.id.flag3);


        runOnUiThread(new Runnable() {
            @Override
            public void run() {

                try {
                     ImageView img = findViewById(flags.get(0));
                     ImageView img2 = findViewById(flags.get(1));
                    ImageView img3 = findViewById(flags.get(2));

                    Bitmap bmp = null;
                    Bitmap bmp2 = null;
                    Bitmap bmp3 = null;
                    try {
                        URL url = new URL("https://raw.githubusercontent.com/hjnilsson/country-flags/master/png250px/" + finalCountryCode + ".png");
                        URL url2 = new URL("https://raw.githubusercontent.com/hjnilsson/country-flags/master/png250px/" + finalCountryCode2 + ".png");
                        URL url3 = new URL("https://raw.githubusercontent.com/hjnilsson/country-flags/master/png250px/" + finalCountryCode3 + ".png");
                        bmp = BitmapFactory.decodeStream(url.openConnection().getInputStream());
                        bmp2 = BitmapFactory.decodeStream(url2.openConnection().getInputStream());
                        bmp3 = BitmapFactory.decodeStream(url3.openConnection().getInputStream());
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    img.setImageBitmap(bmp);
                    img2.setImageBitmap(bmp2);
                    img3.setImageBitmap(bmp3);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });

    }
     int wrongGuesses=0;


    /**
     * This method executes when the submit button is pressed
      * @param v
     */
    public void onSubmit(View v){
        if(submit.getText().toString().equalsIgnoreCase("NEXT")){
            getRandomCountry();
            wrongGuesses=0;
            answer.setText("");
            countryText1.setEnabled(true);
            countryText2.setEnabled(true);
            countryText3.setEnabled(true);
            countryText1.setText("");
            countryText1.setTextColor(Color.BLACK);
            countryText2.setTextColor(Color.BLACK);
            countryText3.setTextColor(Color.BLACK);
            countryText2.setText("");
            countryText3.setText("");
            submit.setText(R.string.SUBMIT);
        }else {


            if(isTimer==true ){
                runTimer();
            }
            ArrayList<EditText> inputList = new ArrayList<>();
            ArrayList<String> countryList = new ArrayList<>();
            inputList.add(countryText1);
            inputList.add(countryText2);
            inputList.add(countryText3);
            countryList.add(country1);
            countryList.add(country2);
            countryList.add(country3);
            System.out.println(countryList);
            for (int i = 0; i < inputList.size(); i++) {
                EditText e = inputList.get(i);
                System.out.println(e.getText().toString());
                if(e.getText().toString().equalsIgnoreCase(countryList.get(i))){
//                        score++;
//                    scoreText.setText(score+" ");
                }
            }

            boolean answer;
            for (int i = 0; i < countryList.size(); i++) {
                checkAnswer(countryList.get(i),inputList.get(i));
            }
            int ansCount = 0;

            for (int i = 0; i < countryList.size(); i++) {
                answer = checkAnswer(countryList.get(i),inputList.get(i));
                if(answer==true){
                    ansCount++;

                } else{
                    wrongGuesses++;
                    if(wrongGuesses!=3){
                        Toast.makeText(this,(3-wrongGuesses)+" more guesses remaining",Toast.LENGTH_SHORT).show();

                    }
                    ansCount=0;
                    break;
                }
            }
            if(ansCount>=3) {
                submit.setText(R.string.NEXT);
                this.answer.setText(R.string.CORRECT);

            }
            if(wrongGuesses>2){
                Toast.makeText(this,"You have reached the guess limit",Toast.LENGTH_SHORT).show();

                this.answer.setText(R.string.WRONG);
                this.answer.setTextColor(Color.RED);
                for (int i = 0; i < countryList.size(); i++) {
                    if(!inputList.get(i).getText().toString().equalsIgnoreCase(countryList.get(i))){
                        inputList.get(i).setText("'"+countryList.get(i)+"'");
                        inputList.get(i).setTextColor(Color.BLUE);
                        inputList.get(i).setEnabled(false);
                    }
                }
                submit.setText(R.string.NEXT);
                if(isTimer){
                    countDownTimer.cancel();

                }
            }

        }




    }

    /**
     * This method checks whether the input is correct for the corresponding flag
     * @param country
     * @param input
     * @return
     */

    private boolean checkAnswer(String country, EditText input){

        if(country.equalsIgnoreCase(input.getText().toString())){
            correctAnswer(input);
            return true;
        }else{
            wrongAnswer(input);
            return false;
        }

    }

    private void wrongAnswer(EditText input) {
        input.setTextColor(Color.RED);

    }


    private void correctAnswer(EditText input) {


        answer.setTextColor(Color.GREEN);
        input.setEnabled(false);
        input.setTextColor(Color.GREEN);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        SharedPreferences prefs = this.getSharedPreferences("myPrefsKey", Context.MODE_PRIVATE);
        SharedPreferences.Editor editor = prefs.edit();
        editor.putInt("highScore", score);
        editor.commit();

    }


    /**
     * This method triggers the countdown timer
     */
    CountDownTimer countDownTimer;
   public void runTimer(){



       if(countDownTimer!=null){
           countDownTimer.cancel();
           }
      countDownTimer = new CountDownTimer(10000,1000){
           @Override
           public void onTick(long millisUntilFinished) {
               System.out.println("1sec");
               long millis= millisUntilFinished;
               String hms= String.format("%02d:%02d:%02d",

                       TimeUnit.MILLISECONDS.toHours(millis),
                       TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)),
                       TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))
               );
               timer.setText(hms);
           }

           @Override
           public void onFinish() {
               if(submit.getText().toString().equalsIgnoreCase("submit")){
                   submit.callOnClick();
               }

           }
       }.start();
    }



}
